# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.source.python':
    'no-yapf':
        'prefix': 'noyapf'
        'body': '# yapf: disable \n\t$1\n# yapf: enable'

    'no-pylint-file':
        'prefix': 'nopylintfile'
        'body': '# pylint: skip-file\n'

    'no-pylint-line':
        'prefix': 'nopylintline'
        'body': '# pylint: disable=$1'

    'no-pylint-block':
        'prefix': 'nopylintblock'
        'body': '# pylint: disable=${1:error-msg}\n${2:pass}\n# pylint: enable=${1:error-msg}'


    'print-list-with-sep':
        'prefix': 'printsep'
        'body': 'print(*${1:list}, sep="${2:\\\\n}")'

    'multi-line-string':
        'prefix': '"""'
        'body': '"""$1\n\t$2\n"""'

    'multi-line-comment':
        'prefix': '#'
        'body': '# $1\n#\t$2'

    '#!/usr/bin/env python':
        'prefix': 'env'
        'body': '#!/usr/bin/env python\n'

    '# coding=utf-8':
        'prefix': 'enc'
        'body': '# coding=utf-8\n'

    'Import':
        'prefix': 'im'
        'body': 'import ${1:package/module}'

    'From/Import':
        'prefix': 'fim'
        'body': 'from ${1:package/module} import ${2:names}'

      'Assert':
        'prefix': 'as'
        'body': 'self.assert_(${1:boolean expression}${2:, \'${3:message}\'})$0'

    'New Class':
        'prefix': 'class'
        'body': 'class ${1:ClassName}(${2:object}):\n\t"""${3:docstring for $1.}"""\n\tdef __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.arg = arg\n\t\t$0'

      'New Method':
        'prefix': 'defs'
        'body': 'def ${1:mname}(self, ${2:arg}):\n\t"""${3:docstring for $1.}"""\n\t${3:pass}'

      'New Function':
        'prefix': 'def'
        'body': 'def ${1:fname}(${2:arg}):\n\t"""${3:docstring for $1.}"""\n\t${3:pass}'

      'if':
        'prefix': 'if'
        'body': 'if ${1:condition}:\n\t${2:pass}'
      'for':
        'prefix': 'for'
        'body': 'for ${1:value} in ${2:variable}:\n\t${3:pass}'
      'while':
        'prefix': 'while'
        'body': 'while ${1:condition}:\n\t${2:pass}'
      'Try/Except/Else/Finally':
        'prefix': 'tryef'
        'body': 'try:\n\t${1:pass}\nexcept${2: ${3:Exception} as ${4:e}}:\n\t${5:raise}\nelse:\n\t${6:pass}\nfinally:\n\t${7:pass}'
      'Try/Except/Else':
        'prefix': 'trye'
        'body': 'try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${5:pass}'
      'Try/Except/Finally':
        'prefix': 'tryf'
        'body': 'try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${5:pass}'
      'Try/Except':
        'prefix': 'try'
        'body': 'try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}'

      'List Comprehension':
        'prefix': 'lc'
        'body': '[${1:value} for ${2:value} in ${3:variable}]'
      'List Comprehension If Else':
        'prefix': 'lcie'
        'body': '[${1:value} if ${2:condition} else ${3:condition} for ${4:value} in ${5:variable}]'
      'Dictionary Comprehension':
        'prefix': 'dc'
        'body': '{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:variable}}'

      '__magic__':
        'prefix': '__'
        'body': '__${1:init}__'
      'if __name__ == \'__main__\'':
        'prefix': 'ifmain'
        'body': 'if __name__ == \'__main__\':\n\t${1:main()}$0'

'.source.python:not(.string)':
    'self-args':
        'prefix': '.'
        'body': 'self.${1:arg} = ${1:arg}'
