set nocompatible      " We're running Vim, not Vi! .. be iMproved

" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %

"--------------
" Load pathogen
"--------------
runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()


"------------------
" Syntax and indent
"------------------
syntax on " turn on syntax highlighting
set showmatch " show matching braces when text indicator is over them

" highlight current line, but only in active window
augroup CursorLineOnlyInActiveWindow
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

" Show whitespace
" MUST be inserted BEFORE the colorscheme command
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
au InsertLeave * match ExtraWhitespace /\s\+$/

set t_Co=256
colorscheme wombat256mod

" Enable syntax highlighting
filetype off
filetype plugin indent on
syntax on
set autoindent

" Color Column
set tw=79   " width of document (used by gd)
set colorcolumn=80
highlight ColorColumn ctermbg=233

set ruler " show current position in file

" Enable folding
set foldmethod=indent
set foldlevel=99

" Enable folding with the spacebar
nnoremap <space> za

"---------------------
" Basic editing config
"---------------------

" Automatic switching between absolute and relative mode
set number
set relativenumber
autocmd InsertEnter * :set norelativenumber
autocmd InsertEnter * :set number
autocmd InsertLeave * :set relativenumber

" Better copy & paste
 " When you want to paste large blocks of code into vim,     press F2 before you
 " paste. At the bottom you should see ``-- INSERT (past    e) --``.
 set pastetoggle=<F2>
 set clipboard=unnamedplus
vmap y ygv<Esc>

" easier moving of code blocks
" Try to go into visual mode (v), thenselect several li    nes of code here and
" then press ``>`` several times.
vnoremap < <gv  " better indentation
vnoremap > >gv  " better indentation

set mouse+=a " enable mouse mode (scrolling, selection,     etc)

" Real programmers don't use TABs but spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

set incsearch " incremental search (as string is being     typed)
set hls " highlight search
"smart something-sensitive search
set ignorecase
set smartcase

set history=8192  "more history
set undolevels=1000  "more undo

" Bind nohl
" Removes highlight of your last search
" ``<C>`` stands for ``CTRL`` and therefore ``<C-n>`` stands for ``CTRL+n``
noremap <Leader>h :nohl<CR>
vnoremap <Leader>h :nohl<CR>
" inoremap <Leader>n :nohl<CR>

"---------------------
" Navigation
"---------------------

set mouse=a " enable mouse mode (scrolling, selection,     etc)

" Open split panes to the right and bottom
set splitbelow
set splitright

" bind Ctrl+<movement> keys to move around the windows,     instead of using Ctrl+w + <movement>
" Every unnecessary keystroke that can be saved is good   for your health :)
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" easier moving between tabs
" map <Leader>n <esc>:tabprevious<CR>
" map <Leader>m <esc>:tabnext<CR>

set timeout timeoutlen=1000 ttimeoutlen=100  "fix slow O inserts

"Tab completion for files/buffers
set wildmode=longest,list
set wildmenu

"---------------------
" Misc
"---------------------

"Disable backup and swap files
set nobackup
set nowritebackup
set noswapfile

set autochdir  "automatically set current directory to the directory of the last opened file

runtime macros/matchit.vim
"---------------------
" Plugin Config
"---------------------

" airline
set laststatus=2  "Always show statusline
set encoding=utf-8 "for the fancy stuff

let g:airline_powerline_fonts = 1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme='bubblegum'

let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

" tmuxline

let g:tmuxline_separators = {
    \ 'left' : '',
    \ 'left_alt': '',
    \ 'right' : '',
    \ 'right_alt' : '',
    \ 'space' : ' '}

"CtrlP
let g:ctrlp_map = '<c-p>'
nnoremap ; :CtrlPBuffer<CR>
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,.venv/*,*.pyc
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn|venv)$'
let g:ctrlp_max_height = 30
let g:ctrlp_root_markers = ['src']

" vim operator flashy
map y <Plug>(operator-flashy)
nmap Y <Plug>(operator-flashy)$
hi Flashy guibg=yellow

" YAPF
autocmd FileType python nnoremap <leader>y :0,$!yapf<Cr>

" syntastic Recommended Settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['pylint']

" Omnicomplete related stuff
set completeopt=longest,menuone
" inoremap <c-space> <C-x><C-o>
" inoremap <c-@> <C-x><C-o>
autocmd FileType python set omnifunc=jedi#completions


" found here: http://stackoverflow.com/a/2170800/70778
function! OmniPopup(action)
    if pumvisible()
        if a:action == 'j'
            return "\<C-N>"
        elseif a:action == 'k'
            return "\<C-P>"
        endif
    endif
    return a:action
endfunction
inoremap <silent><C-j> <C-R>=OmniPopup('j')<CR>
inoremap <silent><C-k> <C-R>=OmniPopup('k')<CR>

" SuperTab
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabContextDefaultCompletionType = "<c-p>"
let g:SuperTabLongestEnhanced = 1

let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
let g:SuperTabContextDiscoverDiscovery = ["&omnifunc:<c-x><c-o>"]
autocmd FileType *
      \ if &omnifunc != '' |
      \ call SuperTabChain(&omnifunc, "<c-p>") |
      \ call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
      \ endif

autocmd FileType *
    \ if &omnifunc == '' |
    \ setlocal omnifunc=syntaxcomplete#Complete |
    \ call SuperTabChain(&omnifunc, "<c-p>") |
    \ call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
    \ endif

" =====================
let g:jedi#usages_command = "<leader>n"
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
map <Leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>
